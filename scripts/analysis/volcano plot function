# =============================================
# Volcano Plot Generation for RNA-Seq Data
# =============================================

# Load required libraries
library(tidyverse)
library(ggrepel)

# =============================================
# Function: Generate Volcano Plot
# =============================================
generate_volcano_plot <- function(data, prefix, output_dir = getwd()) {
  # Dynamically create column names based on the prefix
  logFC_col <- paste0(prefix, "_logFC")
  pvalue_col <- paste0(prefix, "_pvalue")
  adj_pvalue_col <- paste0(prefix, "_adj_pvalue")
  
  # Prepare the data for plotting
  plot_data <- data %>%
    select(external_gene_name, 
           !!sym(logFC_col), !!sym(pvalue_col), !!sym(adj_pvalue_col)) %>%
    rename(logFC = !!sym(logFC_col), 
           pvalue = !!sym(pvalue_col), 
           adj_pvalue = !!sym(adj_pvalue_col)) %>%
    mutate(diffexpressed = "NO")  # Default: Not differentially expressed
  
  # Add differential expression status
  plot_data <- plot_data %>%
    mutate(
      diffexpressed = case_when(
        pvalue < 0.05 & logFC > 0.6 ~ "UP",
        pvalue < 0.05 & logFC < -0.6 ~ "DOWN",
        TRUE ~ "NO"
      )
    )
  
  # Identify the top 30 most significant genes (lowest adjusted p-values)
  plot_data <- plot_data %>%
    mutate(
      delabel = ifelse(
        external_gene_name %in% head(plot_data[order(adj_pvalue), "external_gene_name"], 30), 
        external_gene_name, 
        NA
      )
    )
  
  # Generate the volcano plot
  volcano_plot <- ggplot(data = plot_data, aes(x = logFC, y = -log10(pvalue), 
                                               col = diffexpressed, label = delabel)) +
    geom_point(size = 1.2, alpha = 0.8) +  # Add points with slight transparency
    geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "grey", size = 0.8) +  # Horizontal line for significance
    geom_vline(xintercept = c(-0.6, 0.6), linetype = "dashed", color = "grey", size = 0.8) +  # Vertical lines for logFC thresholds
    labs(
      title = paste0(prefix, " Volcano Plot"),
      x = "Log2 Fold Change (logFC)",
      y = "-Log10(p-value)",
      color = "Expression"
    ) +
    scale_color_manual(
      values = c("DOWN" = "#00AFBB", "NO" = "grey", "UP" = "red"),
      labels = c("Downregulated", "Not Significant", "Upregulated")
    ) +
    geom_text_repel(aes(label = delabel), max.overlaps = Inf, size = 3, box.padding = 0.3) +
    theme_minimal(base_size = 14) +
    theme(
      legend.position = "top",
      legend.title = element_text(size = 12),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
  
  # Save the plot to a file
  output_file <- file.path(output_dir, paste0(prefix, "_volcano_plot.png"))
  ggsave(filename = output_file, plot = volcano_plot, width = 8, height = 6)
  
  # Return the plot object (optional, for interactive use)
  return(volcano_plot)
}

# =============================================
# Example Usage
# =============================================

# Define the prefixes for the cell lines
prefixes <- c("A_1.1", "A_1.2", "A_4.1", "A_4.2",
              "W_1.1", "W_1.2", "W_1.3", "W_4.1", "W_4.2")

# Generate volcano plots for each cell line using `logFC_pvalues`
for (prefix in prefixes) {
  generate_volcano_plot(logFC_pvalues, prefix)
}

# Generate volcano plots for each cell line using `hoek_logFC_p`
for (prefix in prefixes) {
  generate_volcano_plot(hoek_logFC_p, prefix, output_dir = "Hoek_Volcano_Plots")
}
